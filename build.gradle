buildscript {
    ext {
        kotlinVersion = '1.2.51'
        springBootVersion = '2.1.0.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
    }
}

plugins {
    id 'com.palantir.docker-run' version '0.20.1'
    id 'com.avast.gradle.docker-compose' version '0.8.12'
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'kotlin-jpa'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'


group = 'com.rescuehub'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

repositories {
    mavenCentral()
    maven {
        url 'https://naturalprogrammer.github.io/mvn-repository'
    }
}

allOpen {
    annotation("javax.persistence.Entity")
    annotation("javax.persistence.MappedSuperclass")
    annotation("javax.persistence.Embeddable")
}

ext {
    springCloudVersion = 'Finchley.SR2'
}

test {
    useJUnitPlatform()
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('com.fasterxml.jackson.module:jackson-module-kotlin')
    implementation('org.springframework.security:spring-security-oauth2-client')

    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    implementation("javax.xml.bind:jaxb-api:2.2.8")
    implementation("org.postgresql:postgresql:42.2.5")
    implementation("javax.inject:javax.inject:1")
    implementation('io.jsonwebtoken:jjwt:0.5.1')
    // implementation('com.naturalprogrammer.spring-lemon:spring-lemon-jpa:1.0.0.M8')

    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('com.h2database:h2:1.4.194')
    testImplementation('io.kotlintest:kotlintest-runner-junit5:3.1.7')
    testImplementation('io.kotlintest:kotlintest-extensions-spring:3.1.7')
    testImplementation("com.nhaarman.mockitokotlin2:mockito-kotlin:2.0.0-RC1")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dockerRun {
    name 'postgres'
    image 'postgres:9.6-alpine'
    ports '5432:5432'
    env 'POSTGRES_USER': 'rescuehub-user', 'POSTGRES_PASSWORD': 'kittens@123', 'POSTGRES_DB': 'rescuehub'
    clean true
    volumes 'src/main/resources/schema.sql' : '/docker-entrypoint-initdb.d/schema.sql'
}

bootRun.dependsOn 'dockerRun'
// Need to run './gradlew dockerStop' after running Ctrl+C to stop the bootRun task

composeUp.dependsOn(bootJar)

dockerCompose {
    projectName = 'rescuehub'
    useComposeFiles = ['docker-compose.yml', 'docker-compose.build.yml']
    buildAdditionalArgs = ['--build-arg', "JAR_FILE=${jar.archiveName}"]
}

